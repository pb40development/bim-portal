/*
 * BIM-Portal REST-API
 * Dies ist die Dokumentation der REST-Endpunkte, die sowohl öffentliche als auch private Informationselemente abrufen können. Authentifizierung ist für den Zugriff auf private Ressourcen erforderlich. Die Endpunkte können auf dieser Seite getestet werden.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.bimportal.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.UUID;
import org.hibernate.validator.constraints.*;

/** DigitalFormat */
@JsonPropertyOrder({
  DigitalFormat.JSON_PROPERTY_ID,
  DigitalFormat.JSON_PROPERTY_VERSION,
  DigitalFormat.JSON_PROPERTY_CREATED_DATE,
  DigitalFormat.JSON_PROPERTY_PRECISION,
  DigitalFormat.JSON_PROPERTY_UNIT_OF_MEASURE
})
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2025-09-03T22:05:51.794303+02:00[Europe/Berlin]",
    comments = "Generator version: 7.9.0")
public class DigitalFormat {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_VERSION = "version";
  private Long version;

  public static final String JSON_PROPERTY_CREATED_DATE = "createdDate";
  private OffsetDateTime createdDate;

  public static final String JSON_PROPERTY_PRECISION = "precision";
  private String precision;

  public static final String JSON_PROPERTY_UNIT_OF_MEASURE = "unitOfMeasure";
  private String unitOfMeasure;

  public DigitalFormat() {}

  public DigitalFormat id(UUID id) {

    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   */
  @jakarta.annotation.Nullable
  @Valid
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public UUID getId() {
    return id;
  }

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(UUID id) {
    this.id = id;
  }

  public DigitalFormat version(Long version) {

    this.version = version;
    return this;
  }

  /**
   * Get version
   *
   * @return version
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getVersion() {
    return version;
  }

  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(Long version) {
    this.version = version;
  }

  public DigitalFormat createdDate(OffsetDateTime createdDate) {

    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   *
   * @return createdDate
   */
  @jakarta.annotation.Nullable
  @Valid
  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }

  public DigitalFormat precision(String precision) {

    this.precision = precision;
    return this;
  }

  /**
   * Get precision
   *
   * @return precision
   */
  @jakarta.annotation.Nonnull
  @NotNull
  @JsonProperty(JSON_PROPERTY_PRECISION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getPrecision() {
    return precision;
  }

  @JsonProperty(JSON_PROPERTY_PRECISION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPrecision(String precision) {
    this.precision = precision;
  }

  public DigitalFormat unitOfMeasure(String unitOfMeasure) {

    this.unitOfMeasure = unitOfMeasure;
    return this;
  }

  /**
   * Get unitOfMeasure
   *
   * @return unitOfMeasure
   */
  @jakarta.annotation.Nonnull
  @NotNull
  @Size(min = 1)
  @JsonProperty(JSON_PROPERTY_UNIT_OF_MEASURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getUnitOfMeasure() {
    return unitOfMeasure;
  }

  @JsonProperty(JSON_PROPERTY_UNIT_OF_MEASURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnitOfMeasure(String unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DigitalFormat digitalFormat = (DigitalFormat) o;
    return Objects.equals(this.id, digitalFormat.id)
        && Objects.equals(this.version, digitalFormat.version)
        && Objects.equals(this.createdDate, digitalFormat.createdDate)
        && Objects.equals(this.precision, digitalFormat.precision)
        && Objects.equals(this.unitOfMeasure, digitalFormat.unitOfMeasure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, version, createdDate, precision, unitOfMeasure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DigitalFormat {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("    unitOfMeasure: ").append(toIndentedString(unitOfMeasure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
