/*
 * BIM-Portal REST-API
 * Dies ist die Dokumentation der REST-Endpunkte, die sowohl öffentliche als auch private Informationselemente abrufen können. Authentifizierung ist für den Zugriff auf private Ressourcen erforderlich. Die Endpunkte können auf dieser Seite getestet werden.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bimportal.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;
import org.hibernate.validator.constraints.*;

/**
 * TextFormat
 */
@JsonPropertyOrder({
  TextFormat.JSON_PROPERTY_ENCODING,
  TextFormat.JSON_PROPERTY_NUMBER_OF_CHARACTERS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-03T22:05:51.794303+02:00[Europe/Berlin]", comments = "Generator version: 7.9.0")
public class TextFormat {
  public static final String JSON_PROPERTY_ENCODING = "encoding";
  private String encoding;

  public static final String JSON_PROPERTY_NUMBER_OF_CHARACTERS = "numberOfCharacters";
  private String numberOfCharacters;

  public TextFormat() {
  }

  public TextFormat encoding(String encoding) {
    
    this.encoding = encoding;
    return this;
  }

  /**
   * Get encoding
   * @return encoding
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEncoding() {
    return encoding;
  }


  @JsonProperty(JSON_PROPERTY_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }


  public TextFormat numberOfCharacters(String numberOfCharacters) {
    
    this.numberOfCharacters = numberOfCharacters;
    return this;
  }

  /**
   * Get numberOfCharacters
   * @return numberOfCharacters
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NUMBER_OF_CHARACTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNumberOfCharacters() {
    return numberOfCharacters;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_CHARACTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfCharacters(String numberOfCharacters) {
    this.numberOfCharacters = numberOfCharacters;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextFormat textFormat = (TextFormat) o;
    return Objects.equals(this.encoding, textFormat.encoding) &&
        Objects.equals(this.numberOfCharacters, textFormat.numberOfCharacters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encoding, numberOfCharacters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextFormat {\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    numberOfCharacters: ").append(toIndentedString(numberOfCharacters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

