/*
 * BIM-Portal REST-API
 * Dies ist die Dokumentation der REST-Endpunkte, die sowohl öffentliche als auch private Informationselemente abrufen können. Authentifizierung ist für den Zugriff auf private Ressourcen erforderlich. Die Endpunkte können auf dieser Seite getestet werden.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bimportal.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.bimportal.client.model.DataFormatTypeDto;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;
import org.hibernate.validator.constraints.*;

/**
 * DataFormatDto
 */
@JsonPropertyOrder({
  DataFormatDto.JSON_PROPERTY_ID,
  DataFormatDto.JSON_PROPERTY_TYPE,
  DataFormatDto.JSON_PROPERTY_AT_CLASS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-03T22:05:51.794303+02:00[Europe/Berlin]", comments = "Generator version: 7.9.0")
@JsonIgnoreProperties(
  value = "@class", // ignore manually set @class, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the @class to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@class", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = IFCDto.class, name = "IFCDto"),
  @JsonSubTypes.Type(value = OKSTRADto.class, name = "OKSTRADto"),
  @JsonSubTypes.Type(value = OtherDto.class, name = "OtherDto"),
})

public class DataFormatDto {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_TYPE = "type";
  private DataFormatTypeDto type;

  public static final String JSON_PROPERTY_AT_CLASS = "@class";
  protected String atClass;

  public DataFormatDto() {
  }

  public DataFormatDto id(UUID id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(UUID id) {
    this.id = id;
  }


  public DataFormatDto type(DataFormatTypeDto type) {
    
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DataFormatTypeDto getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(DataFormatTypeDto type) {
    this.type = type;
  }


  public DataFormatDto atClass(String atClass) {
    
    this.atClass = atClass;
    return this;
  }

  /**
   * Get atClass
   * @return atClass
   */
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_AT_CLASS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAtClass() {
    return atClass;
  }


  @JsonProperty(JSON_PROPERTY_AT_CLASS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAtClass(String atClass) {
    this.atClass = atClass;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataFormatDto dataFormatDto = (DataFormatDto) o;
    return Objects.equals(this.id, dataFormatDto.id) &&
        Objects.equals(this.type, dataFormatDto.type) &&
        Objects.equals(this.atClass, dataFormatDto.atClass);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, atClass);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataFormatDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    atClass: ").append(toIndentedString(atClass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

