/*
 * BIM-Portal REST-API
 * Dies ist die Dokumentation der REST-Endpunkte, die sowohl öffentliche als auch private Informationselemente abrufen können. Authentifizierung ist für den Zugriff auf private Ressourcen erforderlich. Die Endpunkte können auf dieser Seite getestet werden.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.bimportal.client.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.Objects;
import org.hibernate.validator.constraints.*;

/** IFCDto */
@JsonPropertyOrder({
  IFCDto.JSON_PROPERTY_IFC_VIEW,
  IFCDto.JSON_PROPERTY_IFC_CLASS,
  IFCDto.JSON_PROPERTY_IFC_TYPE,
  IFCDto.JSON_PROPERTY_GROUP_AS_I_F_CE_PSET,
  IFCDto.JSON_PROPERTY_SAVE_OBJECT_TYPE_AS_PROPERTY
})
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2025-09-03T22:05:51.794303+02:00[Europe/Berlin]",
    comments = "Generator version: 7.9.0")
@JsonIgnoreProperties(
    value = "@class", // ignore manually set @class, it will be automatically generated by Jackson
    // during serialization
    allowSetters = true // allows the @class to be set during deserialization
    )
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "@class",
    visible = true)
public class IFCDto extends DataFormatDto {
  public static final String JSON_PROPERTY_IFC_VIEW = "ifcView";
  private IFCViewDto ifcView;

  public static final String JSON_PROPERTY_IFC_CLASS = "ifcClass";
  private IFCClassDto ifcClass;

  public static final String JSON_PROPERTY_IFC_TYPE = "ifcType";
  private IFCTypeDto ifcType;

  public static final String JSON_PROPERTY_GROUP_AS_I_F_CE_PSET = "groupAsIFCePset";
  private Boolean groupAsIFCePset;

  public static final String JSON_PROPERTY_SAVE_OBJECT_TYPE_AS_PROPERTY =
      "saveObjectTypeAsProperty";
  private Boolean saveObjectTypeAsProperty;

  public IFCDto() {}

  public IFCDto ifcView(IFCViewDto ifcView) {

    this.ifcView = ifcView;
    return this;
  }

  /**
   * Get ifcView
   *
   * @return ifcView
   */
  @jakarta.annotation.Nullable
  @Valid
  @JsonProperty(JSON_PROPERTY_IFC_VIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public IFCViewDto getIfcView() {
    return ifcView;
  }

  @JsonProperty(JSON_PROPERTY_IFC_VIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIfcView(IFCViewDto ifcView) {
    this.ifcView = ifcView;
  }

  public IFCDto ifcClass(IFCClassDto ifcClass) {

    this.ifcClass = ifcClass;
    return this;
  }

  /**
   * Get ifcClass
   *
   * @return ifcClass
   */
  @jakarta.annotation.Nullable
  @Valid
  @JsonProperty(JSON_PROPERTY_IFC_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public IFCClassDto getIfcClass() {
    return ifcClass;
  }

  @JsonProperty(JSON_PROPERTY_IFC_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIfcClass(IFCClassDto ifcClass) {
    this.ifcClass = ifcClass;
  }

  public IFCDto ifcType(IFCTypeDto ifcType) {

    this.ifcType = ifcType;
    return this;
  }

  /**
   * Get ifcType
   *
   * @return ifcType
   */
  @jakarta.annotation.Nullable
  @Valid
  @JsonProperty(JSON_PROPERTY_IFC_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public IFCTypeDto getIfcType() {
    return ifcType;
  }

  @JsonProperty(JSON_PROPERTY_IFC_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIfcType(IFCTypeDto ifcType) {
    this.ifcType = ifcType;
  }

  public IFCDto groupAsIFCePset(Boolean groupAsIFCePset) {

    this.groupAsIFCePset = groupAsIFCePset;
    return this;
  }

  /**
   * Get groupAsIFCePset
   *
   * @return groupAsIFCePset
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROUP_AS_I_F_CE_PSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getGroupAsIFCePset() {
    return groupAsIFCePset;
  }

  @JsonProperty(JSON_PROPERTY_GROUP_AS_I_F_CE_PSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroupAsIFCePset(Boolean groupAsIFCePset) {
    this.groupAsIFCePset = groupAsIFCePset;
  }

  public IFCDto saveObjectTypeAsProperty(Boolean saveObjectTypeAsProperty) {

    this.saveObjectTypeAsProperty = saveObjectTypeAsProperty;
    return this;
  }

  /**
   * Get saveObjectTypeAsProperty
   *
   * @return saveObjectTypeAsProperty
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SAVE_OBJECT_TYPE_AS_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getSaveObjectTypeAsProperty() {
    return saveObjectTypeAsProperty;
  }

  @JsonProperty(JSON_PROPERTY_SAVE_OBJECT_TYPE_AS_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSaveObjectTypeAsProperty(Boolean saveObjectTypeAsProperty) {
    this.saveObjectTypeAsProperty = saveObjectTypeAsProperty;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IFCDto ifCDto = (IFCDto) o;
    return Objects.equals(this.ifcView, ifCDto.ifcView)
        && Objects.equals(this.ifcClass, ifCDto.ifcClass)
        && Objects.equals(this.ifcType, ifCDto.ifcType)
        && Objects.equals(this.groupAsIFCePset, ifCDto.groupAsIFCePset)
        && Objects.equals(this.saveObjectTypeAsProperty, ifCDto.saveObjectTypeAsProperty)
        && super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        ifcView, ifcClass, ifcType, groupAsIFCePset, saveObjectTypeAsProperty, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IFCDto {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    ifcView: ").append(toIndentedString(ifcView)).append("\n");
    sb.append("    ifcClass: ").append(toIndentedString(ifcClass)).append("\n");
    sb.append("    ifcType: ").append(toIndentedString(ifcType)).append("\n");
    sb.append("    groupAsIFCePset: ").append(toIndentedString(groupAsIFCePset)).append("\n");
    sb.append("    saveObjectTypeAsProperty: ")
        .append(toIndentedString(saveObjectTypeAsProperty))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
