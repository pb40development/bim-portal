/*
 * BIM-Portal REST-API
 * Dies ist die Dokumentation der REST-Endpunkte, die sowohl öffentliche als auch private Informationselemente abrufen können. Authentifizierung ist für den Zugriff auf private Ressourcen erforderlich. Die Endpunkte können auf dieser Seite getestet werden.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bimportal.client.model;

import java.util.Objects;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.*;

import java.time.OffsetDateTime;

import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;
import org.hibernate.validator.constraints.*;

/**
 * JWTTokenPublicDto
 */
@JsonPropertyOrder({
  JWTTokenPublicDto.JSON_PROPERTY_TOKEN,
  JWTTokenPublicDto.JSON_PROPERTY_REFRESH_TOKEN,
  JWTTokenPublicDto.JSON_PROPERTY_VALID_TILL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-03T22:05:51.794303+02:00[Europe/Berlin]", comments = "Generator version: 7.9.0")
public class JWTTokenPublicDto {
  public static final String JSON_PROPERTY_TOKEN = "token";
  private String token;

  public static final String JSON_PROPERTY_REFRESH_TOKEN = "refreshToken";
  private String refreshToken;

  public static final String JSON_PROPERTY_VALID_TILL = "validTill";
  //@JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSSXXX")
  private OffsetDateTime validTill;

  public JWTTokenPublicDto() {
  }

  public JWTTokenPublicDto token(String token) {
    
    this.token = token;
    return this;
  }

  /**
   * Get token
   * @return token
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getToken() {
    return token;
  }


  @JsonProperty(JSON_PROPERTY_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToken(String token) {
    this.token = token;
  }


  public JWTTokenPublicDto refreshToken(String refreshToken) {
    
    this.refreshToken = refreshToken;
    return this;
  }

  /**
   * Get refreshToken
   * @return refreshToken
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_REFRESH_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRefreshToken() {
    return refreshToken;
  }


  @JsonProperty(JSON_PROPERTY_REFRESH_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRefreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
  }


  public JWTTokenPublicDto validTill(OffsetDateTime validTill) {
    
    this.validTill = validTill;
    return this;
  }

  /**
   * Get validTill
   * @return validTill
   */
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_VALID_TILL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getValidTill() {
    return validTill;
  }


  @JsonProperty(JSON_PROPERTY_VALID_TILL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValidTill(OffsetDateTime validTill) {
    this.validTill = validTill;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JWTTokenPublicDto jwTTokenPublicDto = (JWTTokenPublicDto) o;
    return Objects.equals(this.token, jwTTokenPublicDto.token) &&
        Objects.equals(this.refreshToken, jwTTokenPublicDto.refreshToken) &&
        Objects.equals(this.validTill, jwTTokenPublicDto.validTill);
  }

  @Override
  public int hashCode() {
    return Objects.hash(token, refreshToken, validTill);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JWTTokenPublicDto {\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("    validTill: ").append(toIndentedString(validTill)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

