/*
 * BIM-Portal REST-API
 * Dies ist die Dokumentation der REST-Endpunkte, die sowohl öffentliche als auch private Informationselemente abrufen können. Authentifizierung ist für den Zugriff auf private Ressourcen erforderlich. Die Endpunkte können auf dieser Seite getestet werden.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.bimportal.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;
import org.hibernate.validator.constraints.*;

/** SymbolsOfTheGivenPropertyGroupDto */
@JsonPropertyOrder({
  SymbolsOfTheGivenPropertyGroupDto.JSON_PROPERTY_SYMBOL,
  SymbolsOfTheGivenPropertyGroupDto.JSON_PROPERTY_PROP_GROUP_I_D,
  SymbolsOfTheGivenPropertyGroupDto.JSON_PROPERTY_GROUP_NAMES
})
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2025-09-03T22:05:51.794303+02:00[Europe/Berlin]",
    comments = "Generator version: 7.9.0")
public class SymbolsOfTheGivenPropertyGroupDto {
  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private String symbol;

  public static final String JSON_PROPERTY_PROP_GROUP_I_D = "propGroupID";
  private UUID propGroupID;

  public static final String JSON_PROPERTY_GROUP_NAMES = "groupNames";
  private List<@Valid NamesInLanguageDto> groupNames = new ArrayList<>();

  public SymbolsOfTheGivenPropertyGroupDto() {}

  public SymbolsOfTheGivenPropertyGroupDto symbol(String symbol) {

    this.symbol = symbol;
    return this;
  }

  /**
   * Get symbol
   *
   * @return symbol
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSymbol() {
    return symbol;
  }

  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public SymbolsOfTheGivenPropertyGroupDto propGroupID(UUID propGroupID) {

    this.propGroupID = propGroupID;
    return this;
  }

  /**
   * Get propGroupID
   *
   * @return propGroupID
   */
  @jakarta.annotation.Nullable
  @Valid
  @JsonProperty(JSON_PROPERTY_PROP_GROUP_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public UUID getPropGroupID() {
    return propGroupID;
  }

  @JsonProperty(JSON_PROPERTY_PROP_GROUP_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPropGroupID(UUID propGroupID) {
    this.propGroupID = propGroupID;
  }

  public SymbolsOfTheGivenPropertyGroupDto groupNames(List<@Valid NamesInLanguageDto> groupNames) {

    this.groupNames = groupNames;
    return this;
  }

  public SymbolsOfTheGivenPropertyGroupDto addGroupNamesItem(NamesInLanguageDto groupNamesItem) {
    if (this.groupNames == null) {
      this.groupNames = new ArrayList<>();
    }
    this.groupNames.add(groupNamesItem);
    return this;
  }

  /**
   * Get groupNames
   *
   * @return groupNames
   */
  @jakarta.annotation.Nullable
  @Valid
  @JsonProperty(JSON_PROPERTY_GROUP_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid NamesInLanguageDto> getGroupNames() {
    return groupNames;
  }

  @JsonProperty(JSON_PROPERTY_GROUP_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroupNames(List<@Valid NamesInLanguageDto> groupNames) {
    this.groupNames = groupNames;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SymbolsOfTheGivenPropertyGroupDto symbolsOfTheGivenPropertyGroupDto =
        (SymbolsOfTheGivenPropertyGroupDto) o;
    return Objects.equals(this.symbol, symbolsOfTheGivenPropertyGroupDto.symbol)
        && Objects.equals(this.propGroupID, symbolsOfTheGivenPropertyGroupDto.propGroupID)
        && Objects.equals(this.groupNames, symbolsOfTheGivenPropertyGroupDto.groupNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, propGroupID, groupNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SymbolsOfTheGivenPropertyGroupDto {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    propGroupID: ").append(toIndentedString(propGroupID)).append("\n");
    sb.append("    groupNames: ").append(toIndentedString(groupNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
