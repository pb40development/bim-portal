/*
 * BIM-Portal REST-API
 * Dies ist die Dokumentation der REST-Endpunkte, die sowohl öffentliche als auch private Informationselemente abrufen können. Authentifizierung ist für den Zugriff auf private Ressourcen erforderlich. Die Endpunkte können auf dieser Seite getestet werden.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.bimportal.client.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.LinkedHashSet;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;
import org.hibernate.validator.constraints.*;

/** SimpleInheritedPropertyDto */
@JsonPropertyOrder({
  SimpleInheritedPropertyDto.JSON_PROPERTY_ID,
  SimpleInheritedPropertyDto.JSON_PROPERTY_NAMES,
  SimpleInheritedPropertyDto.JSON_PROPERTY_VERSION_NUMBER,
  SimpleInheritedPropertyDto.JSON_PROPERTY_REVISION_NUMBER,
  SimpleInheritedPropertyDto.JSON_PROPERTY_INFORMATION_ELEMENT_STATUS
})
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2025-09-03T22:05:51.794303+02:00[Europe/Berlin]",
    comments = "Generator version: 7.9.0")
public class SimpleInheritedPropertyDto {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_NAMES = "names";
  private Set<@Valid NamesInLanguage> names = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_VERSION_NUMBER = "versionNumber";
  private Long versionNumber;

  public static final String JSON_PROPERTY_REVISION_NUMBER = "revisionNumber";
  private Long revisionNumber;

  /** Gets or Sets informationElementStatus */
  public enum InformationElementStatusEnum {
    INITIAL("INITIAL"),

    PROPOSED("PROPOSED"),

    CREATION("CREATION"),

    REVIEW("REVIEW"),

    VALIDATION("VALIDATION"),

    ACCEPTED("ACCEPTED"),

    PUBLISHED("PUBLISHED"),

    DEPRECATED("DEPRECATED"),

    SORTED_OUT("SORTED_OUT"),

    REJECTED("REJECTED");

    private String value;

    InformationElementStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InformationElementStatusEnum fromValue(String value) {
      for (InformationElementStatusEnum b : InformationElementStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INFORMATION_ELEMENT_STATUS = "informationElementStatus";
  private InformationElementStatusEnum informationElementStatus;

  public SimpleInheritedPropertyDto() {}

  public SimpleInheritedPropertyDto id(UUID id) {

    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   */
  @jakarta.annotation.Nullable
  @Valid
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public UUID getId() {
    return id;
  }

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(UUID id) {
    this.id = id;
  }

  public SimpleInheritedPropertyDto names(Set<@Valid NamesInLanguage> names) {

    this.names = names;
    return this;
  }

  public SimpleInheritedPropertyDto addNamesItem(NamesInLanguage namesItem) {
    if (this.names == null) {
      this.names = new LinkedHashSet<>();
    }
    this.names.add(namesItem);
    return this;
  }

  /**
   * Get names
   *
   * @return names
   */
  @jakarta.annotation.Nullable
  @Valid
  @JsonProperty(JSON_PROPERTY_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Set<@Valid NamesInLanguage> getNames() {
    return names;
  }

  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNames(Set<@Valid NamesInLanguage> names) {
    this.names = names;
  }

  public SimpleInheritedPropertyDto versionNumber(Long versionNumber) {

    this.versionNumber = versionNumber;
    return this;
  }

  /**
   * Get versionNumber
   *
   * @return versionNumber
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getVersionNumber() {
    return versionNumber;
  }

  @JsonProperty(JSON_PROPERTY_VERSION_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersionNumber(Long versionNumber) {
    this.versionNumber = versionNumber;
  }

  public SimpleInheritedPropertyDto revisionNumber(Long revisionNumber) {

    this.revisionNumber = revisionNumber;
    return this;
  }

  /**
   * Get revisionNumber
   *
   * @return revisionNumber
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REVISION_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getRevisionNumber() {
    return revisionNumber;
  }

  @JsonProperty(JSON_PROPERTY_REVISION_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRevisionNumber(Long revisionNumber) {
    this.revisionNumber = revisionNumber;
  }

  public SimpleInheritedPropertyDto informationElementStatus(
      InformationElementStatusEnum informationElementStatus) {

    this.informationElementStatus = informationElementStatus;
    return this;
  }

  /**
   * Get informationElementStatus
   *
   * @return informationElementStatus
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INFORMATION_ELEMENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public InformationElementStatusEnum getInformationElementStatus() {
    return informationElementStatus;
  }

  @JsonProperty(JSON_PROPERTY_INFORMATION_ELEMENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInformationElementStatus(InformationElementStatusEnum informationElementStatus) {
    this.informationElementStatus = informationElementStatus;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimpleInheritedPropertyDto simpleInheritedPropertyDto = (SimpleInheritedPropertyDto) o;
    return Objects.equals(this.id, simpleInheritedPropertyDto.id)
        && Objects.equals(this.names, simpleInheritedPropertyDto.names)
        && Objects.equals(this.versionNumber, simpleInheritedPropertyDto.versionNumber)
        && Objects.equals(this.revisionNumber, simpleInheritedPropertyDto.revisionNumber)
        && Objects.equals(
            this.informationElementStatus, simpleInheritedPropertyDto.informationElementStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, names, versionNumber, revisionNumber, informationElementStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimpleInheritedPropertyDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("    revisionNumber: ").append(toIndentedString(revisionNumber)).append("\n");
    sb.append("    informationElementStatus: ")
        .append(toIndentedString(informationElementStatus))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
