/*
 * BIM-Portal REST-API
 * Dies ist die Dokumentation der REST-Endpunkte, die sowohl öffentliche als auch private Informationselemente abrufen können. Authentifizierung ist für den Zugriff auf private Ressourcen erforderlich. Die Endpunkte können auf dieser Seite getestet werden.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bimportal.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;
import org.hibernate.validator.constraints.*;

/**
 * PropertyOrGroupCatalogInformation
 */
@JsonPropertyOrder({
  PropertyOrGroupCatalogInformation.JSON_PROPERTY_CATALOG_NAME,
  PropertyOrGroupCatalogInformation.JSON_PROPERTY_CATALOG_URL,
  PropertyOrGroupCatalogInformation.JSON_PROPERTY_CATALOG_PROVIDER,
  PropertyOrGroupCatalogInformation.JSON_PROPERTY_INFO_ELEMENT_URL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-03T22:05:51.794303+02:00[Europe/Berlin]", comments = "Generator version: 7.9.0")
public class PropertyOrGroupCatalogInformation {
  public static final String JSON_PROPERTY_CATALOG_NAME = "catalogName";
  private String catalogName;

  public static final String JSON_PROPERTY_CATALOG_URL = "catalogUrl";
  private String catalogUrl;

  public static final String JSON_PROPERTY_CATALOG_PROVIDER = "catalogProvider";
  private String catalogProvider;

  public static final String JSON_PROPERTY_INFO_ELEMENT_URL = "infoElementUrl";
  private String infoElementUrl;

  public PropertyOrGroupCatalogInformation() {
  }

  public PropertyOrGroupCatalogInformation catalogName(String catalogName) {
    
    this.catalogName = catalogName;
    return this;
  }

  /**
   * Get catalogName
   * @return catalogName
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CATALOG_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCatalogName() {
    return catalogName;
  }


  @JsonProperty(JSON_PROPERTY_CATALOG_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCatalogName(String catalogName) {
    this.catalogName = catalogName;
  }


  public PropertyOrGroupCatalogInformation catalogUrl(String catalogUrl) {
    
    this.catalogUrl = catalogUrl;
    return this;
  }

  /**
   * Get catalogUrl
   * @return catalogUrl
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CATALOG_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCatalogUrl() {
    return catalogUrl;
  }


  @JsonProperty(JSON_PROPERTY_CATALOG_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCatalogUrl(String catalogUrl) {
    this.catalogUrl = catalogUrl;
  }


  public PropertyOrGroupCatalogInformation catalogProvider(String catalogProvider) {
    
    this.catalogProvider = catalogProvider;
    return this;
  }

  /**
   * Get catalogProvider
   * @return catalogProvider
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_CATALOG_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCatalogProvider() {
    return catalogProvider;
  }


  @JsonProperty(JSON_PROPERTY_CATALOG_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCatalogProvider(String catalogProvider) {
    this.catalogProvider = catalogProvider;
  }


  public PropertyOrGroupCatalogInformation infoElementUrl(String infoElementUrl) {
    
    this.infoElementUrl = infoElementUrl;
    return this;
  }

  /**
   * Get infoElementUrl
   * @return infoElementUrl
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_INFO_ELEMENT_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInfoElementUrl() {
    return infoElementUrl;
  }


  @JsonProperty(JSON_PROPERTY_INFO_ELEMENT_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInfoElementUrl(String infoElementUrl) {
    this.infoElementUrl = infoElementUrl;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyOrGroupCatalogInformation propertyOrGroupCatalogInformation = (PropertyOrGroupCatalogInformation) o;
    return Objects.equals(this.catalogName, propertyOrGroupCatalogInformation.catalogName) &&
        Objects.equals(this.catalogUrl, propertyOrGroupCatalogInformation.catalogUrl) &&
        Objects.equals(this.catalogProvider, propertyOrGroupCatalogInformation.catalogProvider) &&
        Objects.equals(this.infoElementUrl, propertyOrGroupCatalogInformation.infoElementUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalogName, catalogUrl, catalogProvider, infoElementUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyOrGroupCatalogInformation {\n");
    sb.append("    catalogName: ").append(toIndentedString(catalogName)).append("\n");
    sb.append("    catalogUrl: ").append(toIndentedString(catalogUrl)).append("\n");
    sb.append("    catalogProvider: ").append(toIndentedString(catalogProvider)).append("\n");
    sb.append("    infoElementUrl: ").append(toIndentedString(infoElementUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

