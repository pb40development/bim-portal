/*
 * BIM-Portal REST-API
 * Dies ist die Dokumentation der REST-Endpunkte, die sowohl öffentliche als auch private Informationselemente abrufen können. Authentifizierung ist für den Zugriff auf private Ressourcen erforderlich. Die Endpunkte können auf dieser Seite getestet werden.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.bimportal.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.UUID;
import org.hibernate.validator.constraints.*;

/** RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries */
@JsonPropertyOrder({
  RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries.JSON_PROPERTY_ID,
  RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries.JSON_PROPERTY_VERSION,
  RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries.JSON_PROPERTY_CREATED_DATE,
  RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries.JSON_PROPERTY_PROPERTY_I_D,
  RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries.JSON_PROPERTY_INTER_CON_DICT_I_D
})
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2025-09-03T22:05:51.794303+02:00[Europe/Berlin]",
    comments = "Generator version: 7.9.0")
public class RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_VERSION = "version";
  private Long version;

  public static final String JSON_PROPERTY_CREATED_DATE = "createdDate";
  private OffsetDateTime createdDate;

  public static final String JSON_PROPERTY_PROPERTY_I_D = "propertyID";
  private String propertyID;

  public static final String JSON_PROPERTY_INTER_CON_DICT_I_D = "interConDictID";
  private String interConDictID;

  public RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries() {}

  public RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries id(UUID id) {

    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   */
  @jakarta.annotation.Nullable
  @Valid
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public UUID getId() {
    return id;
  }

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(UUID id) {
    this.id = id;
  }

  public RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries version(Long version) {

    this.version = version;
    return this;
  }

  /**
   * Get version
   *
   * @return version
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getVersion() {
    return version;
  }

  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(Long version) {
    this.version = version;
  }

  public RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries createdDate(
      OffsetDateTime createdDate) {

    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   *
   * @return createdDate
   */
  @jakarta.annotation.Nullable
  @Valid
  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }

  public RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries propertyID(
      String propertyID) {

    this.propertyID = propertyID;
    return this;
  }

  /**
   * Get propertyID
   *
   * @return propertyID
   */
  @jakarta.annotation.Nonnull
  @NotNull
  @JsonProperty(JSON_PROPERTY_PROPERTY_I_D)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getPropertyID() {
    return propertyID;
  }

  @JsonProperty(JSON_PROPERTY_PROPERTY_I_D)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPropertyID(String propertyID) {
    this.propertyID = propertyID;
  }

  public RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries interConDictID(
      String interConDictID) {

    this.interConDictID = interConDictID;
    return this;
  }

  /**
   * Get interConDictID
   *
   * @return interConDictID
   */
  @jakarta.annotation.Nonnull
  @NotNull
  @JsonProperty(JSON_PROPERTY_INTER_CON_DICT_I_D)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getInterConDictID() {
    return interConDictID;
  }

  @JsonProperty(JSON_PROPERTY_INTER_CON_DICT_I_D)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInterConDictID(String interConDictID) {
    this.interConDictID = interConDictID;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries
        relationOfThePropertyIdentifiersInTheInterconnectedDictionaries =
            (RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries) o;
    return Objects.equals(
            this.id, relationOfThePropertyIdentifiersInTheInterconnectedDictionaries.id)
        && Objects.equals(
            this.version, relationOfThePropertyIdentifiersInTheInterconnectedDictionaries.version)
        && Objects.equals(
            this.createdDate,
            relationOfThePropertyIdentifiersInTheInterconnectedDictionaries.createdDate)
        && Objects.equals(
            this.propertyID,
            relationOfThePropertyIdentifiersInTheInterconnectedDictionaries.propertyID)
        && Objects.equals(
            this.interConDictID,
            relationOfThePropertyIdentifiersInTheInterconnectedDictionaries.interConDictID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, version, createdDate, propertyID, interConDictID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    propertyID: ").append(toIndentedString(propertyID)).append("\n");
    sb.append("    interConDictID: ").append(toIndentedString(interConDictID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
