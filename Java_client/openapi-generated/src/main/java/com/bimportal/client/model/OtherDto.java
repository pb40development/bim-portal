/*
 * BIM-Portal REST-API
 * Dies ist die Dokumentation der REST-Endpunkte, die sowohl öffentliche als auch private Informationselemente abrufen können. Authentifizierung ist für den Zugriff auf private Ressourcen erforderlich. Die Endpunkte können auf dieser Seite getestet werden.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.bimportal.client.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import jakarta.validation.constraints.*;
import java.util.Objects;
import org.hibernate.validator.constraints.*;

/** OtherDto */
@JsonPropertyOrder({
  OtherDto.JSON_PROPERTY_DATA_FORMAT_VERSION,
  OtherDto.JSON_PROPERTY_VIEW_TYPE,
  OtherDto.JSON_PROPERTY_NAME
})
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2025-09-03T22:05:51.794303+02:00[Europe/Berlin]",
    comments = "Generator version: 7.9.0")
@JsonIgnoreProperties(
    value = "@class", // ignore manually set @class, it will be automatically generated by Jackson
    // during serialization
    allowSetters = true // allows the @class to be set during deserialization
    )
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "@class",
    visible = true)
public class OtherDto extends DataFormatDto {
  public static final String JSON_PROPERTY_DATA_FORMAT_VERSION = "dataFormatVersion";
  private String dataFormatVersion;

  public static final String JSON_PROPERTY_VIEW_TYPE = "viewType";
  private String viewType;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public OtherDto() {}

  public OtherDto dataFormatVersion(String dataFormatVersion) {

    this.dataFormatVersion = dataFormatVersion;
    return this;
  }

  /**
   * Get dataFormatVersion
   *
   * @return dataFormatVersion
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATA_FORMAT_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDataFormatVersion() {
    return dataFormatVersion;
  }

  @JsonProperty(JSON_PROPERTY_DATA_FORMAT_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDataFormatVersion(String dataFormatVersion) {
    this.dataFormatVersion = dataFormatVersion;
  }

  public OtherDto viewType(String viewType) {

    this.viewType = viewType;
    return this;
  }

  /**
   * Get viewType
   *
   * @return viewType
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VIEW_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getViewType() {
    return viewType;
  }

  @JsonProperty(JSON_PROPERTY_VIEW_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setViewType(String viewType) {
    this.viewType = viewType;
  }

  public OtherDto name(String name) {

    this.name = name;
    return this;
  }

  /**
   * Get name
   *
   * @return name
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OtherDto otherDto = (OtherDto) o;
    return Objects.equals(this.dataFormatVersion, otherDto.dataFormatVersion)
        && Objects.equals(this.viewType, otherDto.viewType)
        && Objects.equals(this.name, otherDto.name)
        && super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataFormatVersion, viewType, name, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OtherDto {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    dataFormatVersion: ").append(toIndentedString(dataFormatVersion)).append("\n");
    sb.append("    viewType: ").append(toIndentedString(viewType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
