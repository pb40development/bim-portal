/*
 * BIM-Portal REST-API
 * Dies ist die Dokumentation der REST-Endpunkte, die sowohl öffentliche als auch private Informationselemente abrufen können. Authentifizierung ist für den Zugriff auf private Ressourcen erforderlich. Die Endpunkte können auf dieser Seite getestet werden.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.bimportal.client.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.Objects;
import java.util.UUID;
import org.hibernate.validator.constraints.*;

/** DataFormatTypeDto */
@JsonPropertyOrder({
  DataFormatTypeDto.JSON_PROPERTY_ID,
  DataFormatTypeDto.JSON_PROPERTY_NAME,
  DataFormatTypeDto.JSON_PROPERTY_MAJOR_RELEASE,
  DataFormatTypeDto.JSON_PROPERTY_MINOR_RELEASE,
  DataFormatTypeDto.JSON_PROPERTY_ADDENDUM,
  DataFormatTypeDto.JSON_PROPERTY_CORRIGENDUM,
  DataFormatTypeDto.JSON_PROPERTY_VARIANT,
  DataFormatTypeDto.JSON_PROPERTY_IFC
})
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2025-09-03T22:05:51.794303+02:00[Europe/Berlin]",
    comments = "Generator version: 7.9.0")
public class DataFormatTypeDto {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_MAJOR_RELEASE = "majorRelease";
  private Integer majorRelease;

  public static final String JSON_PROPERTY_MINOR_RELEASE = "minorRelease";
  private Integer minorRelease;

  public static final String JSON_PROPERTY_ADDENDUM = "addendum";
  private Integer addendum;

  public static final String JSON_PROPERTY_CORRIGENDUM = "corrigendum";
  private Integer corrigendum;

  /** Gets or Sets variant */
  public enum VariantEnum {
    IFC("IFC"),

    OKSTRA("OKSTRA"),

    OTHER("OTHER");

    private String value;

    VariantEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VariantEnum fromValue(String value) {
      for (VariantEnum b : VariantEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VARIANT = "variant";
  private VariantEnum variant;

  public static final String JSON_PROPERTY_IFC = "ifc";
  private Boolean ifc;

  public DataFormatTypeDto() {}

  public DataFormatTypeDto id(UUID id) {

    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   */
  @jakarta.annotation.Nullable
  @Valid
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public UUID getId() {
    return id;
  }

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(UUID id) {
    this.id = id;
  }

  public DataFormatTypeDto name(String name) {

    this.name = name;
    return this;
  }

  /**
   * Get name
   *
   * @return name
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }

  public DataFormatTypeDto majorRelease(Integer majorRelease) {

    this.majorRelease = majorRelease;
    return this;
  }

  /**
   * Get majorRelease
   *
   * @return majorRelease
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAJOR_RELEASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMajorRelease() {
    return majorRelease;
  }

  @JsonProperty(JSON_PROPERTY_MAJOR_RELEASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMajorRelease(Integer majorRelease) {
    this.majorRelease = majorRelease;
  }

  public DataFormatTypeDto minorRelease(Integer minorRelease) {

    this.minorRelease = minorRelease;
    return this;
  }

  /**
   * Get minorRelease
   *
   * @return minorRelease
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MINOR_RELEASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getMinorRelease() {
    return minorRelease;
  }

  @JsonProperty(JSON_PROPERTY_MINOR_RELEASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinorRelease(Integer minorRelease) {
    this.minorRelease = minorRelease;
  }

  public DataFormatTypeDto addendum(Integer addendum) {

    this.addendum = addendum;
    return this;
  }

  /**
   * Get addendum
   *
   * @return addendum
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDENDUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getAddendum() {
    return addendum;
  }

  @JsonProperty(JSON_PROPERTY_ADDENDUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddendum(Integer addendum) {
    this.addendum = addendum;
  }

  public DataFormatTypeDto corrigendum(Integer corrigendum) {

    this.corrigendum = corrigendum;
    return this;
  }

  /**
   * Get corrigendum
   *
   * @return corrigendum
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CORRIGENDUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getCorrigendum() {
    return corrigendum;
  }

  @JsonProperty(JSON_PROPERTY_CORRIGENDUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCorrigendum(Integer corrigendum) {
    this.corrigendum = corrigendum;
  }

  public DataFormatTypeDto variant(VariantEnum variant) {

    this.variant = variant;
    return this;
  }

  /**
   * Get variant
   *
   * @return variant
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VARIANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public VariantEnum getVariant() {
    return variant;
  }

  @JsonProperty(JSON_PROPERTY_VARIANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariant(VariantEnum variant) {
    this.variant = variant;
  }

  public DataFormatTypeDto ifc(Boolean ifc) {

    this.ifc = ifc;
    return this;
  }

  /**
   * Get ifc
   *
   * @return ifc
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IFC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIfc() {
    return ifc;
  }

  @JsonProperty(JSON_PROPERTY_IFC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIfc(Boolean ifc) {
    this.ifc = ifc;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataFormatTypeDto dataFormatTypeDto = (DataFormatTypeDto) o;
    return Objects.equals(this.id, dataFormatTypeDto.id)
        && Objects.equals(this.name, dataFormatTypeDto.name)
        && Objects.equals(this.majorRelease, dataFormatTypeDto.majorRelease)
        && Objects.equals(this.minorRelease, dataFormatTypeDto.minorRelease)
        && Objects.equals(this.addendum, dataFormatTypeDto.addendum)
        && Objects.equals(this.corrigendum, dataFormatTypeDto.corrigendum)
        && Objects.equals(this.variant, dataFormatTypeDto.variant)
        && Objects.equals(this.ifc, dataFormatTypeDto.ifc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, majorRelease, minorRelease, addendum, corrigendum, variant, ifc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataFormatTypeDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    majorRelease: ").append(toIndentedString(majorRelease)).append("\n");
    sb.append("    minorRelease: ").append(toIndentedString(minorRelease)).append("\n");
    sb.append("    addendum: ").append(toIndentedString(addendum)).append("\n");
    sb.append("    corrigendum: ").append(toIndentedString(corrigendum)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("    ifc: ").append(toIndentedString(ifc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
