/*
 * BIM-Portal REST-API
 * Dies ist die Dokumentation der REST-Endpunkte, die sowohl öffentliche als auch private Informationselemente abrufen können. Authentifizierung ist für den Zugriff auf private Ressourcen erforderlich. Die Endpunkte können auf dieser Seite getestet werden.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.bimportal.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import java.util.Objects;
import org.hibernate.validator.constraints.*;

/** DefinitionsInLanguageDto */
@JsonPropertyOrder({
  DefinitionsInLanguageDto.JSON_PROPERTY_DEFINITION,
  DefinitionsInLanguageDto.JSON_PROPERTY_LANGUAGE,
  DefinitionsInLanguageDto.JSON_PROPERTY_VALUE
})
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2025-09-03T22:05:51.794303+02:00[Europe/Berlin]",
    comments = "Generator version: 7.9.0")
public class DefinitionsInLanguageDto {
  public static final String JSON_PROPERTY_DEFINITION = "definition";
  private String definition;

  public static final String JSON_PROPERTY_LANGUAGE = "language";
  private String language;

  public static final String JSON_PROPERTY_VALUE = "value";
  private String value;

  public DefinitionsInLanguageDto() {}

  public DefinitionsInLanguageDto definition(String definition) {

    this.definition = definition;
    return this;
  }

  /**
   * Get definition
   *
   * @return definition
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFINITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDefinition() {
    return definition;
  }

  @JsonProperty(JSON_PROPERTY_DEFINITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefinition(String definition) {
    this.definition = definition;
  }

  public DefinitionsInLanguageDto language(String language) {

    this.language = language;
    return this;
  }

  /**
   * Get language
   *
   * @return language
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getLanguage() {
    return language;
  }

  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLanguage(String language) {
    this.language = language;
  }

  public DefinitionsInLanguageDto value(String value) {

    this.value = value;
    return this;
  }

  /**
   * Get value
   *
   * @return value
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getValue() {
    return value;
  }

  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValue(String value) {
    this.value = value;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DefinitionsInLanguageDto definitionsInLanguageDto = (DefinitionsInLanguageDto) o;
    return Objects.equals(this.definition, definitionsInLanguageDto.definition)
        && Objects.equals(this.language, definitionsInLanguageDto.language)
        && Objects.equals(this.value, definitionsInLanguageDto.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(definition, language, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DefinitionsInLanguageDto {\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
