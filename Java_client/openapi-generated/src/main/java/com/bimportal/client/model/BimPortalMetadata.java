/*
 * BIM-Portal REST-API
 * Dies ist die Dokumentation der REST-Endpunkte, die sowohl öffentliche als auch private Informationselemente abrufen können. Authentifizierung ist für den Zugriff auf private Ressourcen erforderlich. Die Endpunkte können auf dieser Seite getestet werden.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bimportal.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;
import org.hibernate.validator.constraints.*;

/**
 * BimPortalMetadata
 */
@JsonPropertyOrder({
  BimPortalMetadata.JSON_PROPERTY_STATUS,
  BimPortalMetadata.JSON_PROPERTY_VISIBILITY,
  BimPortalMetadata.JSON_PROPERTY_EXTERNAL,
  BimPortalMetadata.JSON_PROPERTY_ORGANISATION_ID,
  BimPortalMetadata.JSON_PROPERTY_TRANSFERRED,
  BimPortalMetadata.JSON_PROPERTY_NEXT_STATE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-03T22:05:51.794303+02:00[Europe/Berlin]", comments = "Generator version: 7.9.0")
public class BimPortalMetadata {
  /**
   * Gets or Sets status
   */
  public enum StatusEnum {
    INITIAL("INITIAL"),
    
    PROPOSED("PROPOSED"),
    
    CREATION("CREATION"),
    
    REVIEW("REVIEW"),
    
    VALIDATION("VALIDATION"),
    
    ACCEPTED("ACCEPTED"),
    
    PUBLISHED("PUBLISHED"),
    
    DEPRECATED("DEPRECATED"),
    
    SORTED_OUT("SORTED_OUT"),
    
    REJECTED("REJECTED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  /**
   * Gets or Sets visibility
   */
  public enum VisibilityEnum {
    PUBLIC("PUBLIC"),
    
    SECURED("SECURED"),
    
    CHILD("CHILD"),
    
    PRIVATE("PRIVATE");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VISIBILITY = "visibility";
  private VisibilityEnum visibility;

  public static final String JSON_PROPERTY_EXTERNAL = "external";
  private Boolean external;

  public static final String JSON_PROPERTY_ORGANISATION_ID = "organisationId";
  private UUID organisationId;

  public static final String JSON_PROPERTY_TRANSFERRED = "transferred";
  private Boolean transferred;

  /**
   * Gets or Sets nextState
   */
  public enum NextStateEnum {
    PROPOSE("PROPOSE"),
    
    ACCEPT("ACCEPT"),
    
    SUBMIT_FOR_REVIEW("SUBMIT_FOR_REVIEW"),
    
    SUBMIT_FOR_VALIDATION("SUBMIT_FOR_VALIDATION"),
    
    VALIDATED("VALIDATED"),
    
    PUBLISH("PUBLISH"),
    
    DEPRECATE("DEPRECATE"),
    
    SORT_OUT("SORT_OUT"),
    
    REJECT("REJECT"),
    
    RESTORE("RESTORE"),
    
    EXTEND("EXTEND"),
    
    CREATE("CREATE"),
    
    IMPORT("IMPORT");

    private String value;

    NextStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static NextStateEnum fromValue(String value) {
      for (NextStateEnum b : NextStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_NEXT_STATE = "nextState";
  private NextStateEnum nextState;

  public BimPortalMetadata() {
  }

  public BimPortalMetadata status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   * @deprecated
   */
  @Deprecated
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public BimPortalMetadata visibility(VisibilityEnum visibility) {
    
    this.visibility = visibility;
    return this;
  }

  /**
   * Get visibility
   * @return visibility
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_VISIBILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public VisibilityEnum getVisibility() {
    return visibility;
  }


  @JsonProperty(JSON_PROPERTY_VISIBILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }


  public BimPortalMetadata external(Boolean external) {
    
    this.external = external;
    return this;
  }

  /**
   * Get external
   * @return external
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_EXTERNAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getExternal() {
    return external;
  }


  @JsonProperty(JSON_PROPERTY_EXTERNAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExternal(Boolean external) {
    this.external = external;
  }


  public BimPortalMetadata organisationId(UUID organisationId) {
    
    this.organisationId = organisationId;
    return this;
  }

  /**
   * Get organisationId
   * @return organisationId
   */
  @jakarta.annotation.Nonnull
  @NotNull
  @Valid

  @JsonProperty(JSON_PROPERTY_ORGANISATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getOrganisationId() {
    return organisationId;
  }


  @JsonProperty(JSON_PROPERTY_ORGANISATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrganisationId(UUID organisationId) {
    this.organisationId = organisationId;
  }


  public BimPortalMetadata transferred(Boolean transferred) {
    
    this.transferred = transferred;
    return this;
  }

  /**
   * Get transferred
   * @return transferred
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TRANSFERRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTransferred() {
    return transferred;
  }


  @JsonProperty(JSON_PROPERTY_TRANSFERRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransferred(Boolean transferred) {
    this.transferred = transferred;
  }


  public BimPortalMetadata nextState(NextStateEnum nextState) {
    
    this.nextState = nextState;
    return this;
  }

  /**
   * Get nextState
   * @return nextState
   */
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_NEXT_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NextStateEnum getNextState() {
    return nextState;
  }


  @JsonProperty(JSON_PROPERTY_NEXT_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNextState(NextStateEnum nextState) {
    this.nextState = nextState;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BimPortalMetadata bimPortalMetadata = (BimPortalMetadata) o;
    return Objects.equals(this.status, bimPortalMetadata.status) &&
        Objects.equals(this.visibility, bimPortalMetadata.visibility) &&
        Objects.equals(this.external, bimPortalMetadata.external) &&
        Objects.equals(this.organisationId, bimPortalMetadata.organisationId) &&
        Objects.equals(this.transferred, bimPortalMetadata.transferred) &&
        Objects.equals(this.nextState, bimPortalMetadata.nextState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, visibility, external, organisationId, transferred, nextState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BimPortalMetadata {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    external: ").append(toIndentedString(external)).append("\n");
    sb.append("    organisationId: ").append(toIndentedString(organisationId)).append("\n");
    sb.append("    transferred: ").append(toIndentedString(transferred)).append("\n");
    sb.append("    nextState: ").append(toIndentedString(nextState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

