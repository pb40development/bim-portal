/*
 * BIM-Portal REST-API
 * Dies ist die Dokumentation der REST-Endpunkte, die sowohl öffentliche als auch private Informationselemente abrufen können. Authentifizierung ist für den Zugriff auf private Ressourcen erforderlich. Die Endpunkte können auf dieser Seite getestet werden.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.bimportal.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.Objects;
import java.util.UUID;
import org.hibernate.validator.constraints.*;

/** DocumentationDto */
@JsonPropertyOrder({
  DocumentationDto.JSON_PROPERTY_ID,
  DocumentationDto.JSON_PROPERTY_NAME,
  DocumentationDto.JSON_PROPERTY_PURPOSE,
  DocumentationDto.JSON_PROPERTY_FORMAT,
  DocumentationDto.JSON_PROPERTY_LINK,
  DocumentationDto.JSON_PROPERTY_EXPORT_AS_ATTRIBUTE
})
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2025-09-03T22:05:51.794303+02:00[Europe/Berlin]",
    comments = "Generator version: 7.9.0")
public class DocumentationDto {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_PURPOSE = "purpose";
  private String purpose;

  public static final String JSON_PROPERTY_FORMAT = "format";
  private String format;

  public static final String JSON_PROPERTY_LINK = "link";
  private String link;

  public static final String JSON_PROPERTY_EXPORT_AS_ATTRIBUTE = "exportAsAttribute";
  private Boolean exportAsAttribute;

  public DocumentationDto() {}

  public DocumentationDto id(UUID id) {

    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   */
  @jakarta.annotation.Nullable
  @Valid
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public UUID getId() {
    return id;
  }

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(UUID id) {
    this.id = id;
  }

  public DocumentationDto name(String name) {

    this.name = name;
    return this;
  }

  /**
   * Get name
   *
   * @return name
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }

  public DocumentationDto purpose(String purpose) {

    this.purpose = purpose;
    return this;
  }

  /**
   * Get purpose
   *
   * @return purpose
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PURPOSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPurpose() {
    return purpose;
  }

  @JsonProperty(JSON_PROPERTY_PURPOSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPurpose(String purpose) {
    this.purpose = purpose;
  }

  public DocumentationDto format(String format) {

    this.format = format;
    return this;
  }

  /**
   * Get format
   *
   * @return format
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getFormat() {
    return format;
  }

  @JsonProperty(JSON_PROPERTY_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFormat(String format) {
    this.format = format;
  }

  public DocumentationDto link(String link) {

    this.link = link;
    return this;
  }

  /**
   * Get link
   *
   * @return link
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getLink() {
    return link;
  }

  @JsonProperty(JSON_PROPERTY_LINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLink(String link) {
    this.link = link;
  }

  public DocumentationDto exportAsAttribute(Boolean exportAsAttribute) {

    this.exportAsAttribute = exportAsAttribute;
    return this;
  }

  /**
   * Get exportAsAttribute
   *
   * @return exportAsAttribute
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPORT_AS_ATTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getExportAsAttribute() {
    return exportAsAttribute;
  }

  @JsonProperty(JSON_PROPERTY_EXPORT_AS_ATTRIBUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExportAsAttribute(Boolean exportAsAttribute) {
    this.exportAsAttribute = exportAsAttribute;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentationDto documentationDto = (DocumentationDto) o;
    return Objects.equals(this.id, documentationDto.id)
        && Objects.equals(this.name, documentationDto.name)
        && Objects.equals(this.purpose, documentationDto.purpose)
        && Objects.equals(this.format, documentationDto.format)
        && Objects.equals(this.link, documentationDto.link)
        && Objects.equals(this.exportAsAttribute, documentationDto.exportAsAttribute);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, purpose, format, link, exportAsAttribute);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentationDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    exportAsAttribute: ").append(toIndentedString(exportAsAttribute)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
