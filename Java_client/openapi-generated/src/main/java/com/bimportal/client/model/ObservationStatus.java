/*
 * BIM-Portal REST-API
 * Dies ist die Dokumentation der REST-Endpunkte, die sowohl öffentliche als auch private Informationselemente abrufen können. Authentifizierung ist für den Zugriff auf private Ressourcen erforderlich. Die Endpunkte können auf dieser Seite getestet werden.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.bimportal.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.Objects;
import java.util.UUID;
import org.hibernate.validator.constraints.*;

/** ObservationStatus */
@JsonPropertyOrder({ObservationStatus.JSON_PROPERTY_OBSERVATION_ID})
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2025-09-03T22:05:51.794303+02:00[Europe/Berlin]",
    comments = "Generator version: 7.9.0")
public class ObservationStatus {
  public static final String JSON_PROPERTY_OBSERVATION_ID = "observationId";
  private UUID observationId;

  public ObservationStatus() {}

  public ObservationStatus observationId(UUID observationId) {

    this.observationId = observationId;
    return this;
  }

  /**
   * Get observationId
   *
   * @return observationId
   */
  @jakarta.annotation.Nullable
  @Valid
  @JsonProperty(JSON_PROPERTY_OBSERVATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public UUID getObservationId() {
    return observationId;
  }

  @JsonProperty(JSON_PROPERTY_OBSERVATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setObservationId(UUID observationId) {
    this.observationId = observationId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObservationStatus observationStatus = (ObservationStatus) o;
    return Objects.equals(this.observationId, observationStatus.observationId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(observationId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObservationStatus {\n");
    sb.append("    observationId: ").append(toIndentedString(observationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
