/*
 * BIM-Portal REST-API
 * Dies ist die Dokumentation der REST-Endpunkte, die sowohl öffentliche als auch private Informationselemente abrufen können. Authentifizierung ist für den Zugriff auf private Ressourcen erforderlich. Die Endpunkte können auf dieser Seite getestet werden.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bimportal.client.model;

import com.bimportal.client.model.BimPortalMetadata;
import com.bimportal.client.model.BookmarkStatus;
import com.bimportal.client.model.BoundaryValues;
import com.bimportal.client.model.CountryLanguageCode;
import com.bimportal.client.model.DefinitionsInLanguageDto;
import com.bimportal.client.model.DescriptionsInLanguageDto;
import com.bimportal.client.model.DigitalFormat;
import com.bimportal.client.model.ExamplesInLanguageDto;
import com.bimportal.client.model.ListOfPossibleValuesInLanguageDto;
import com.bimportal.client.model.NamesInLanguage;
import com.bimportal.client.model.NamesInLanguageDto;
import com.bimportal.client.model.ObservationStatus;
import com.bimportal.client.model.PhysicalQuantity;
import com.bimportal.client.model.PropertyOrGroupCatalogInformation;
import com.bimportal.client.model.PropertyOrGroupWithNamesInLanguage;
import com.bimportal.client.model.RelationOfThePropertyIdentifiersInTheInterconnectedDictionaries;
import com.bimportal.client.model.SimpleParentGroup;
import com.bimportal.client.model.SymbolsOfTheGivenPropertyGroupDto;
import com.bimportal.client.model.TagAssignmentDto;
import com.bimportal.client.model.TextFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.junit.jupiter.api.Test;

/**
 * Model tests for PropertyDto
 */
class PropertyDtoTest {
    private final PropertyDto model = new PropertyDto();

    /**
     * Model tests for PropertyDto
     */
    @Test
    void testPropertyDto() {
        // TODO: test PropertyDto
    }

    /**
     * Test the property 'id'
     */
    @Test
    void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'guid'
     */
    @Test
    void guidTest() {
        // TODO: test guid
    }

    /**
     * Test the property 'status'
     */
    @Test
    void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'dateOfCreation'
     */
    @Test
    void dateOfCreationTest() {
        // TODO: test dateOfCreation
    }

    /**
     * Test the property 'dateOfActivation'
     */
    @Test
    void dateOfActivationTest() {
        // TODO: test dateOfActivation
    }

    /**
     * Test the property 'dateOfLastChange'
     */
    @Test
    void dateOfLastChangeTest() {
        // TODO: test dateOfLastChange
    }

    /**
     * Test the property 'dateOfRevision'
     */
    @Test
    void dateOfRevisionTest() {
        // TODO: test dateOfRevision
    }

    /**
     * Test the property 'dateOfVersion'
     */
    @Test
    void dateOfVersionTest() {
        // TODO: test dateOfVersion
    }

    /**
     * Test the property 'dateOfDeactivation'
     */
    @Test
    void dateOfDeactivationTest() {
        // TODO: test dateOfDeactivation
    }

    /**
     * Test the property 'versionNumber'
     */
    @Test
    void versionNumberTest() {
        // TODO: test versionNumber
    }

    /**
     * Test the property 'revisionNumber'
     */
    @Test
    void revisionNumberTest() {
        // TODO: test revisionNumber
    }

    /**
     * Test the property 'replaces'
     */
    @Test
    void replacesTest() {
        // TODO: test replaces
    }

    /**
     * Test the property 'replacedBy'
     */
    @Test
    void replacedByTest() {
        // TODO: test replacedBy
    }

    /**
     * Test the property 'deprecationExplanation'
     */
    @Test
    void deprecationExplanationTest() {
        // TODO: test deprecationExplanation
    }

    /**
     * Test the property 'relationOfThePropertyIdentifiersInTheInterconnectedDictionaries'
     */
    @Test
    void relationOfThePropertyIdentifiersInTheInterconnectedDictionariesTest() {
        // TODO: test relationOfThePropertyIdentifiersInTheInterconnectedDictionaries
    }

    /**
     * Test the property 'catalogInformation'
     */
    @Test
    void catalogInformationTest() {
        // TODO: test catalogInformation
    }

    /**
     * Test the property 'creatorsLanguage'
     */
    @Test
    void creatorsLanguageTest() {
        // TODO: test creatorsLanguage
    }

    /**
     * Test the property 'namesInLanguage'
     */
    @Test
    void namesInLanguageTest() {
        // TODO: test namesInLanguage
    }

    /**
     * Test the property 'definitionsInLanguage'
     */
    @Test
    void definitionsInLanguageTest() {
        // TODO: test definitionsInLanguage
    }

    /**
     * Test the property 'descriptionsInLanguage'
     */
    @Test
    void descriptionsInLanguageTest() {
        // TODO: test descriptionsInLanguage
    }

    /**
     * Test the property 'examplesInLanguage'
     */
    @Test
    void examplesInLanguageTest() {
        // TODO: test examplesInLanguage
    }

    /**
     * Test the property 'connectedProperties'
     */
    @Test
    void connectedPropertiesTest() {
        // TODO: test connectedProperties
    }

    /**
     * Test the property 'groupOfProperties'
     */
    @Test
    void groupOfPropertiesTest() {
        // TODO: test groupOfProperties
    }

    /**
     * Test the property 'symbolsOfThePropertyInAGivenPropertyGroup'
     */
    @Test
    void symbolsOfThePropertyInAGivenPropertyGroupTest() {
        // TODO: test symbolsOfThePropertyInAGivenPropertyGroup
    }

    /**
     * Test the property 'visualRepresentation'
     */
    @Test
    void visualRepresentationTest() {
        // TODO: test visualRepresentation
    }

    /**
     * Test the property 'countryOfUse'
     */
    @Test
    void countryOfUseTest() {
        // TODO: test countryOfUse
    }

    /**
     * Test the property 'subdivisionOfUse'
     */
    @Test
    void subdivisionOfUseTest() {
        // TODO: test subdivisionOfUse
    }

    /**
     * Test the property 'countryOfOrigin'
     */
    @Test
    void countryOfOriginTest() {
        // TODO: test countryOfOrigin
    }

    /**
     * Test the property 'physicalQuantity'
     */
    @Test
    void physicalQuantityTest() {
        // TODO: test physicalQuantity
    }

    /**
     * Test the property 'dimension'
     */
    @Test
    void dimensionTest() {
        // TODO: test dimension
    }

    /**
     * Test the property 'methodOfMeasurement'
     */
    @Test
    void methodOfMeasurementTest() {
        // TODO: test methodOfMeasurement
    }

    /**
     * Test the property 'dataType'
     */
    @Test
    void dataTypeTest() {
        // TODO: test dataType
    }

    /**
     * Test the property 'dynamicProperty'
     */
    @Test
    void dynamicPropertyTest() {
        // TODO: test dynamicProperty
    }

    /**
     * Test the property 'parametersOfTheDynamicProperty'
     */
    @Test
    void parametersOfTheDynamicPropertyTest() {
        // TODO: test parametersOfTheDynamicProperty
    }

    /**
     * Test the property 'units'
     */
    @Test
    void unitsTest() {
        // TODO: test units
    }

    /**
     * Test the property 'namesOfTheDefiningValues'
     */
    @Test
    void namesOfTheDefiningValuesTest() {
        // TODO: test namesOfTheDefiningValues
    }

    /**
     * Test the property 'definingValues'
     */
    @Test
    void definingValuesTest() {
        // TODO: test definingValues
    }

    /**
     * Test the property 'tolerance'
     */
    @Test
    void toleranceTest() {
        // TODO: test tolerance
    }

    /**
     * Test the property 'digitalFormat'
     */
    @Test
    void digitalFormatTest() {
        // TODO: test digitalFormat
    }

    /**
     * Test the property 'textFormat'
     */
    @Test
    void textFormatTest() {
        // TODO: test textFormat
    }

    /**
     * Test the property 'listOfPossibleValuesInLanguage'
     */
    @Test
    void listOfPossibleValuesInLanguageTest() {
        // TODO: test listOfPossibleValuesInLanguage
    }

    /**
     * Test the property 'boundaryValues'
     */
    @Test
    void boundaryValuesTest() {
        // TODO: test boundaryValues
    }

    /**
     * Test the property 'metadata'
     */
    @Test
    void metadataTest() {
        // TODO: test metadata
    }

    /**
     * Test the property 'bookmarked'
     */
    @Test
    void bookmarkedTest() {
        // TODO: test bookmarked
    }

    /**
     * Test the property 'observed'
     */
    @Test
    void observedTest() {
        // TODO: test observed
    }

    /**
     * Test the property 'organisationId'
     */
    @Test
    void organisationIdTest() {
        // TODO: test organisationId
    }

    /**
     * Test the property 'organisationName'
     */
    @Test
    void organisationNameTest() {
        // TODO: test organisationName
    }

    /**
     * Test the property 'tags'
     */
    @Test
    void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'organisationType'
     */
    @Test
    void organisationTypeTest() {
        // TODO: test organisationType
    }

    /**
     * Test the property 'canCreateNewVersion'
     */
    @Test
    void canCreateNewVersionTest() {
        // TODO: test canCreateNewVersion
    }

}
